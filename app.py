import streamlit as st
import requests
import json
from docx import Document
from io import BytesIO

# Set page configuration
st.set_page_config(page_title="Diccionario Cultural Maya", page_icon="üìö", layout="wide")

# Function to create the information column
def crear_columna_info():
    st.markdown("""
    ## Sobre esta aplicaci√≥n

    Esta aplicaci√≥n permite a los usuarios obtener definiciones de t√©rminos relacionados con temas culturales en general, con un enfoque espec√≠fico en la visi√≥n maya del t√©rmino, citando fuentes relevantes.

    ### C√≥mo usar la aplicaci√≥n:

    1. Elija un t√©rmino cultural de la lista predefinida o proponga su propio t√©rmino.
    2. Haga clic en "Generar entrada de diccionario" para obtener la definici√≥n.
    3. Lea la definici√≥n y las fuentes proporcionadas.
    4. Si lo desea, descargue un documento DOCX con toda la informaci√≥n.

    ### Autor y actualizaci√≥n:
    **Moris Polanco**, 26 ag 2024

    ### C√≥mo citar esta aplicaci√≥n (formato APA):
    Polanco, M. (2024). *Diccionario Cultural Maya* [Aplicaci√≥n web]. https://diccmaya.streamlit.app

    ---
    **Nota:** Esta aplicaci√≥n utiliza inteligencia artificial para generar contenido basado en informaci√≥n disponible en l√≠nea. Siempre verifique la informaci√≥n con fuentes acad√©micas para un an√°lisis m√°s profundo.
    """)

# Titles and Main Column
st.title("Diccionario Cultural Maya")

col1, col2 = st.columns([1, 2])

with col1:
    crear_columna_info()

with col2:
    TOGETHER_API_KEY = st.secrets["TOGETHER_API_KEY"]
    SERPER_API_KEY = st.secrets["SERPER_API_KEY"]

    # Expanded list of 101 cultural terms with a focus on Maya culture
    terminos_culturales = sorted([
        "Ajaw", "Balam (Jaguar)", "Ceiba (√Årbol sagrado)", "Chaac (Dios de la lluvia)", "Ch'ulel (Esp√≠ritu o alma)",
        "Cosmovisi√≥n", "Creador", "Destino", "Dualidad", "Dzuli (Extranjero)", "Etnia", "Familia", "Hunab Ku (Dios supremo)",
        "Ik' (Viento)", "Itzamn√° (Dios del cielo)", "Ixchel (Diosa de la luna)", "Ja' (Agua)", "K'uh (Divinidad)",
        "Kukulc√°n (Serpiente emplumada)", "Lak'in (Punto cardinal este)", "Ma√≠z (Elemento vital)", "Muerte",
        "Nahualismo (Creencia en el esp√≠ritu animal)", "Naci√≥n", "Naturaleza", "Noche", "Noj (Sabidur√≠a)",
        "Oxlahun ti' k'uh (Trece dioses)", "Pawahtun (Dioses del inframundo)", "Persona", "Q'anil (Semilla)",
        "Religi√≥n", "Sak Nikte' (Flor blanca)", "Sak'ij (Iluminaci√≥n)", "Sol", "Suerte", "Tezcatlipoca (Espejo humeante)",
        "Tierra", "Tikal (Ciudad maya)", "Toj (Tributo)", "Tzolkin (Calendario sagrado)", "Uinal (Mes maya)",
        "Uxmal (Tres veces construido)", "Viento", "Wak (Seis)", "Xibalb√° (Inframundo maya)", "Yaxch√© (√Årbol de la vida)",
        "Yuum k‚Äôaax (Dios de los bosques)", "Yuum ik‚Äô (Dios del viento)", "Zama (Amanecer)", "Creaci√≥n", "Espacio-tiempo",
        "Esp√≠ritu", "Fertilidad", "Fuego", "Identidad", "Inframundo", "Jaguar", "Kukulkan", "Luna", "Madera", "Maya",
        "Muerte", "Origen", "Paz", "Poder", "Pueblo", "Respiraci√≥n", "Sacerdote", "Sociedad", "Sol", "Tiempo",
        "Tradici√≥n", "Trascendencia", "Uni√≥n", "Viento", "Vida", "Visi√≥n", "Voluntad", "Agua", "Animales", "√Årboles",
        "Comuni√≥n", "Confianza", "Crecimiento", "Cultivo", "Fuerza", "Hombres", "Mujeres", "Naturaleza", "Puntos cardinales",
        "Reencarnaci√≥n", "Ritual", "Sabidur√≠a", "Salud", "Sue√±o", "Tierra", "Universo", "Vitalidad", "Xenil (Camino)",
        "Yuum Kaax (Dios de la flora y fauna)"
    ])

    def buscar_informacion(query):
        url = "https://google.serper.dev/search"
        payload = json.dumps({
            "q": f"{query} Cultura Maya"
        })
        headers = {
            'X-API-KEY': SERPER_API_KEY,
            'Content-Type': 'application/json'
        }
        response = requests.post(url, headers=headers, data=payload)
        return response.json()

    def generar_definicion(termino, contexto):
        url = "https://api.together.xyz/inference"
        payload = json.dumps({
            "model": "mistralai/Mixtral-8x7B-Instruct-v0.1",
            "prompt": f"Contexto: {contexto}\n\nT√©rmino: {termino}\n\nProporciona una entrada de diccionario sobre '{termino}' en el contexto de la Cultura Maya, destacando su significado y relevancia en esta cultura. Cita fuentes relevantes.\n\nDefinici√≥n:",
            "max_tokens": 2048,
            "temperature": 0.6,
            "top_p": 0.7,
            "top_k": 50,
            "repetition_penalty": 0.5,
            "stop": ["T√©rmino:"]
        })
        headers = {
            'Authorization': f'Bearer {TOGETHER_API_KEY}',
            'Content-Type': 'application/json'
        }
        response = requests.post(url, headers=headers, data=payload)
        return response.json()['output']['choices'][0]['text'].strip()

    def create_docx(termino, definicion, fuentes):
        doc = Document()
        doc.add_heading(f'Diccionario Cultural Maya - {termino}', 0)

        doc.add_heading('T√©rmino', level=1)
        doc.add_paragraph(termino)

        doc.add_heading('Definici√≥n', level=2)
        doc.add_paragraph(definicion)

        doc.add_heading('Fuentes', level=1)
        for fuente in fuentes:
            doc.add_paragraph(fuente, style='List Bullet')

        doc.add_paragraph('\nNota: Este documento fue generado por un asistente de IA. Verifica la informaci√≥n con fuentes acad√©micas para un an√°lisis m√°s profundo.')

        return doc

    st.write("Elige un t√©rmino cultural de la lista o prop√≥n tu propio t√©rmino:")

    opcion = st.radio("", ["Elegir de la lista", "Proponer mi propio t√©rmino"])

    if opcion == "Elegir de la lista":
        termino = st.selectbox("Selecciona un t√©rmino:", terminos_culturales)
    else:
        termino = st.text_input("Ingresa tu propio t√©rmino:")

    if st.button("Generar entrada de diccionario"):
        if termino:
            with st.spinner("Buscando informaci√≥n y generando definici√≥n..."):
                # Buscar informaci√≥n relevante
                resultados_busqueda = buscar_informacion(termino)
                contexto = "\n".join([item["snippet"] for item in resultados_busqueda.get("organic", [])])
                fuentes = [item["link"] for item in resultados_busqueda.get("organic", [])]

                # Generar definici√≥n
                definicion = generar_definicion(termino, contexto)

                # Mostrar la definici√≥n generada
                st.subheader(f"Definici√≥n para el t√©rmino: {termino}")
                st.markdown(f"**Definici√≥n:** {definicion}")

                # Bot√≥n para descargar el documento
                doc = create_docx(termino, definicion, fuentes)
                buffer = BytesIO()
                doc.save(buffer)
                buffer.seek(0)
                st.download_button(
                    label="Descargar definici√≥n en DOCX",
                    data=buffer,
                    file_name=f"Definicion_{termino.replace(' ', '_')}.docx",
                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                )
        else:
            st.warning("Por favor, selecciona un t√©rmino.")
